package Chapter4;

public class C4All {
    public static void main(String[] args) {

    }

    public static void SomeThing(){
        //由类构造对象的过程叫创建类的实例
        //对象中的数据称为实例域
        //操纵数据的过程为方法
        //对于每一个特定的类实例（对象）都有一组特定的实例域值
        //这些值的集合就是这个对象的当前状态
        //注意：实现封装的方法是绝对不能让类中的方法直接访问其他类的实例域
        //程序仅仅通过对象的方法与对象数据进行交互

        //使用OOP需要清楚三个主要特征
        //对象的行为-方法
        //对象的状态-当施加哪些方法会怎样响应
        //对象的标识-如何辨别相同行为与状态的不同对象

        //类之间的关系
        //依赖：（uses-a）:一个类的方法操纵另一个类的对象【尽可能少】
        //聚合：（has-a）:一个对象包含另一个类的对象
        //继承：（is-a）

        //并不是所有类都具有面向对象的特征
        //例如Math类：Math.random
        //Math类只封装了功能，不需要也不必隐藏数据，没有数据不需要关心初始化实例域

        //要想使用对象，必须首先构造对象并指定其初始状态
        //在Java中使用构造器构造新实例：构造器是一种特殊的方法
        //用于构造并初始化对象

        //constructor的名字应该与类名一样，因此Date的constructor的名为Date
        //想要构造一个Data对象，需要在构造器前面加上new操作符
        //new Date()
        //这个对象初始化为当前的日期与时间
        //也能直接使用方法返回的对象（实例）
        //String s = new Date().toString();
        //不过这样只使用了一次new构造的对象
        //一般使用一个变量进行存储
        //
        //注意：C++中很少使用new的，一定要注意，一旦C++中使用了new关键字
        //必不可少的后面一定需要delete，C++最好使用智能指针进行管理
        //例如：std::shared_ptr<XXX> x = std::make_shared<XXX>(args);
        //std::shared_ptr<XXX>(new XXX(args));
        //std::shared_ptr<XXX> xx(new XXX(args));
        //而不同与C++，Java有垃圾回收系统，没有使用的内存会过一段时间得到释放
        //因此，在Java中大量使用了new，同C++一样 new是利用了堆内存空间
        //如果将对一个null调用方法将会引发运行时错误
        //同时注意：局部变量不会自动地初始化为null，而必须通过调用new或将他们设置为null

        //注意：Java中的引用相当于残废的C++的对象指针，而不是C++的引用
        //Date a;//Java
        //等同于
        //Date *a;//C++
        //再次提醒所有Java对象都存储在堆(heap)中一个对象包含另一个对象变量时
        //也包含了指向另一个堆对象的个指针
        //在Java中如果使用一个没有初始化的指针，运行系统会产生一个运行时的错误
        //而不是生成一个随机的结果，同时不必担心内存答理问题，由垃圾收集器处理
        //p98
    }
}
